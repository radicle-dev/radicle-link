// Copyright Â© 2019-2020 The Radicle Foundation <hello@radicle.foundation>
//
// This file is part of radicle-link, distributed under the GPLv3 with Radicle
// Linking Exception. For full terms see the included LICENSE file.

use std::net::SocketAddr;

use librad::{
    git::{identities, Urn},
    net::peer::Peer,
    PeerId,
};

use crate::{signer::Signer, Error, Project};

/// An event generated by the seed node.
#[derive(Debug, Clone)]
pub enum Event {
    /// The seed node is listening for peer connections.
    Listening(Vec<SocketAddr>),
    /// The seed node is experiencing connectivity issues.
    Disconnected,
    /// A project has been tracked from a peer.
    ProjectTracked(Project, PeerId),
}

impl Event {
    pub(crate) async fn project_tracked(
        urn: Urn,
        provider: PeerId,
        api: &Peer<Signer>,
    ) -> Result<Self, Error> {
        let proj = api
            .using_storage({
                let urn = Urn::new(urn.id);
                move |s| identities::project::get(&s, &urn)
            })
            .await??;

        proj.ok_or(Error::NoSuchUrn(urn))
            .map(|proj| Event::ProjectTracked(Project::from(proj), provider))
    }
}
